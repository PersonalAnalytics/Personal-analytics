"""

OVERVIEW: 

Module to convert various file formats on the platform.

"""

import os, sys
import util
import numpy as np
import biom
from biom.util import biom_open
from biom.table import Table

def fastq2fasta((fastqIn, fastaOut)):
    # Converts FASTQ to FASTA using fastx-toolkit.  Written to facilitate parallelization in Python with multiprocessing library, i.e. accepts a single tuple argument rather than two arguments.
    cmd_str = 'fastq_to_fasta -i ' + fastqIn + ' -o ' + fastaOut
    os.system(cmd_str)


def fasta2table(fastaIn, tableOut):
    # Converts a set of fasta sequences into a table format with the first column
    # corresponding to label lines beginning with > and the second column to the sequence.
    keep = {}
    seqs = {}

    for [otu_number, seq] in util.iter_fst(fastaIn):
        otu_number = otu_number[1:]
        keep[otu_number] = 1
        seqs[otu_number] = seq

    # Sort and organize into a new tab-delimited file with OTU_ID and Sequence as columns
    fid = open(tableOut,'w')
    headerline = "OTU_ID" + '\t' + 'Sequence'
    fid.write(headerline+'\n')
    for otu_number in keep:
        line = str(otu_number) + '\t' + seqs[otu_number]
        fid.write(line+'\n')
    fid.close()
    return None


def convert_OTU_to_classic_dense_format(otu_table_file, output_otu_table_file):
    # Converts an OTU table output from the 16S preprocessing steps into a
    # biom-format compatible classic format of the form:
    # OTU_ID  sample1   sample2
    # OTU0    0         0
    # OTU1    34        0
    # 
    # Note:
    #      -OTU labels are in the form 1,2,3,4 and get reassigned to OTU1, OTU2, OTU3, etc.
    #
    with open(otu_table_file,'r') as fidin:
        otu_table_data = fidin.readlines()
        firstrow = otu_table_data[0].split('\t')
        OTU_labels = firstrow[1:]
        OTU_labels[len(OTU_labels)-1] = OTU_labels[len(OTU_labels)-1].rstrip('\n')
        sample_labels = [otu_table_data[i].split('\t')[0] for i in range(1,len(otu_table_data))]
        nOTUs = len(OTU_labels)
        nSamples = len(sample_labels)
        # Load OTU table row major order
        OTU_table_old = np.zeros((nSamples, nOTUs))
        for i in range(1,nSamples+1):
            OTU_table_old[i-1,:] = otu_table_data[i].split('\t')[1:]
        # Write transposed OTU table row major order
        OTU_table_t = np.transpose(OTU_table_old)
        with open(output_otu_table_file,'w') as fidout:
            fidout.write("OTU_ID" + '\t' + '\t'.join(sample_labels) + '\n')
            for i in range(nOTUs):
                tmpline = [str(int(OTU_table_t[i,j])) for j in range(len(OTU_table_t[i,:]))]
                line = OTU_labels[i] + '\t' + '\t'.join(tmpline)
                fidout.write(line + '\n')

def classic2biom(OTU_table_classic, OTU_table_biom):
    # Converts an OTU table in classic dense format (samples as rows, OTU IDs as columns)
    cmd = 'biom convert -i ' + OTU_table_classic + ' -o ' + OTU_table_biom + ' --table-type="OTU table"'
    os.system(cmd)


def build_OTU_table_biom(OTU_table_classic, OTU_table_biom, dataset_ID):
    # Builds a BIOM format OTU table from an OTU table in classic dense format (sample IDs in the first row, OTU IDs in the first column).  For some reason, 'biom convert' command fails to recognize some OTU tables, and therefore the method classic2biom (above) fails.  Look into this sometime...
    with open(OTU_table_classic,'r') as fidin:
        otu_table_data = fidin.readlines()
        firstrow = otu_table_data[0].split('\t')
        sample_labels = firstrow[1:]
        sample_labels[len(sample_labels)-1] = sample_labels[len(sample_labels)-1].rstrip('\n')
        OTU_labels = [otu_table_data[i].split('\t')[0] for i in range(1,len(otu_table_data))]
        nOTUs = len(OTU_labels)
        nSamples = len(sample_labels)
        # Load OTU table row major order
        OTU_table_data = np.zeros((nOTUs, nSamples))
        for i in range(1,nOTUs+1):
            OTU_table_data[i-1,:] = otu_table_data[i].split('\t')[1:]
        # Write in BIOM format
        t = Table(OTU_table_data, OTU_labels, sample_labels, observ_metadata=None, sample_metadata=None, table_id=dataset_ID)
        with biom_open(OTU_table_biom, 'w') as f:
            t.to_hdf5(f, "Generated by processing layer", compress=False)


def load_OTU_table_classic(otu_table_file):
    # Loads an OTU table in classic format of the form:
    # OTU_ID  sample1   sample2
    # OTU0    0         0
    # OTU1    34        0
    # 
    with open(otu_table_file,'r') as fidin:
        otu_table_data = fidin.readlines()
        firstrow = otu_table_data[0].split('\t')
        sample_labels = firstrow[1:]
        sample_labels[len(sample_labels)-1] = sample_labels[len(sample_labels)-1].rstrip('\n')
        OTU_labels = [otu_table_data[i].split('\t')[0] for i in range(1,len(otu_table_data))]
        nOTUs = len(OTU_labels)
        nSamples = len(sample_labels)
        # Load OTU table row major order
        OTU_table = np.zeros((nOTUs, nSamples))
        for i in range(1,nSamples+1):
            OTU_table[i-1,:] = otu_table_data[i].split('\t')[1:]
    return OTU_labels, sample_labels, OTU_table

